# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: commonCommands

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "=1.15.3"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: ap-southeast-2
  profile: default

functions:
  commandHandler:
    handler: handler.commandHandler
    events: # The Events that trigger this Function
      - http:
          path: tradeit/command
          method: post
  eventHandler:
    handler: handler.eventHandler   
    events:
      - stream:
          type: dynamodb
          arn: 
            Fn::GetAtt:
              - EventSource
              - StreamArn   
          batchSize: 100
          startingPosition: LATEST
          enabled: false
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:  
  Resources:
    NotificationSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: 'Notification Message Dispacher'
        TopicName: NotificationSNSTopic
    EventSource:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: event-source
        AttributeDefinitions:
          - AttributeName: sequence
            AttributeType: N
        KeySchema:
          - AttributeName: sequence
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: EventSource
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: arn:aws:dynamodb:*:*:table/event-source
        Roles:
          - Ref: IamRoleLambdaExecution
    SNSIamPolicy:
          Type: "AWS::SNS::TopicPolicy"
          Properties:
            Topics:
              - arn: 
                  Fn::GetAtt:
                    - NotificationSNSTopic
                    - TopicName 
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sns:*
            Roles:
              - Ref: IamRoleLambdaExecution
